 @using MudBlazor
@using P1.Models
@using P1.Services
@implements IDisposable;
@inherits ViewModelComponentBase
@inject IDiscardSelectionService DiscardSelectionService;

<MudPaper ID=@("card-" + Card.Id)
                     @onmouseover="@(() => _viewModel.CardMousedOver = Card)"
          @onmouseleave="@(() => _viewModel.CardMousedOver = null)"
          @onclick="OnClickCard"
          
          class=@($"card d-flex justify-center align-center {GetCardHighlightClass(Card.Highlight)} {(IsCardSelectedForDiscard(Card) ? "selected-for-discard" : "")}")
          Elevation="25">


    @if (Card.Superscript != null)
    {
        <MudText Typo="Typo.subtitle2" Style="position: absolute; top: 10px; right:  10px;">
            <strong>@Card.Superscript</strong>
        </MudText>
    }
    <MudText Typo="Typo.h4">@Card.Text</MudText>
</MudPaper>

<style>
    .card {
        width: @(_viewModel.CardSizePx)px;
        height: @(_viewModel.CardSizePx)px;
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
    }

    .card-highlight-success {
        background-color: #dbf2c9;
    }

    .card-highlight-failure {
        background-color: #ffc5bc;
    }

    .card-highlight-cemented {
        background-color: lightgray;
    }

    .selected-for-discard {
        background-color: rgba(250, 88, 56, 0.42);
        border: 3px solid #fa5838;
        transform: translateY(-15px);
    }

    .card-enter {
        animation: cardSwipeIn 0.4s ease-out forwards;
    }

    .card-exit {
        animation: cardSwipeOut 0.4s ease-in forwards;
    }
    
</style>

@code {

    [Parameter] public CardVM Card { get; set; }
    
    protected override void OnInitialized()
    {
        DiscardSelectionService.OnDiscardStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        DiscardSelectionService.OnDiscardStateChanged -= StateHasChanged;
    }

    private string GetCardHighlightClass(CardHighlight contextHighlight) =>
        contextHighlight switch {
            CardHighlight.Success => "card-highlight-success",
            CardHighlight.Failure => "card-highlight-failure",
            CardHighlight.Cemented => "card-highlight-cemented",
            CardHighlight.None => "card-highlight-none",
            _ => throw new ArgumentOutOfRangeException(nameof(contextHighlight), contextHighlight, null)
        };

    private void OnClickCard()
    {
        if (_viewModel.TurnState == TurnState.DISCARDING)
        {
            DiscardSelectionService.ToggleSelectForDiscard(Card);
        }
    }
    
    private bool IsCardSelectedForDiscard(CardVM card)
    {
        return DiscardSelectionService.SelectedForDiscard.Contains(card);
    }

}