@using P1.Services
@using MudBlazor
@using P1.Models
@inherits ViewModelComponentBase
@implements IDisposable;

@inject IDiscardSelectionService _discardSelectionService;
@inject ITurnService _turnService;

@if (_viewModel.TurnState == TurnState.PLAYING)
{
    <MudTooltip Text="Shuffle cards in hand." Placement="Placement.Top">
        <MudIconButton Icon="@Icons.Material.Filled.Shuffle" ID='shuffle-cards-btn' Style="min-width: 50px; min-height: 50px" Class="ml-10 mr-5"
                       Size="Size.Medium" Color="Color.Surface" Variant="Variant.Filled"
                       OnClick="@_viewModel.ShuffleHand"
                       Disabled="_viewModel.HandCards.Count == 0">
        </MudIconButton>
    </MudTooltip>
    <MudTooltip Text="Return cards to hand." Placement="Placement.Top">
        <MudIconButton Icon="@Icons.Material.Filled.SubdirectoryArrowLeft" ID='return-cards-btn' Style="min-width: 50px; min-height: 50px"  Class="mr-5"
                       Size="Size.Medium" Color="Color.Surface" Variant="Variant.Filled"
                       OnClick="@_viewModel.ReturnHand">
        </MudIconButton>
    </MudTooltip>
    
    <MudSpacer/>
    <MudButton ID='discard-cards-btn' Class="mr-5" Style="height: 50px; width:  140px"
               Size="Size.Medium" Color="Color.Surface" Variant="Variant.Filled" 
               OnClick="_discardSelectionService.OnStartDiscarding"
               Disabled="_turnService.NumDiscardsLeft == 0">
        <MudText Color="Color.Error" Typo="Typo.h5">
            <strong>Discard</strong>
        </MudText>
    </MudButton>
    <MudButton ID='play-cards-btn'
               Size="Size.Medium" Color="Color.Success" Variant="Variant.Filled" Style="height: 50px; width:  140px"
               Disabled="!_viewModel.IsBoardValid"
               OnClick="_viewModel.OnPlayCards">
        <MudText Typo="Typo.h5">
            <strong>Play</strong>
        </MudText>
    </MudButton>
} else if (_viewModel.TurnState == TurnState.DISCARDING) {
    <MudSpacer/>
      <MudButton ID='discard-cards-cancel-btn' Class="mr-5" Style="height: 50px; width:  140px"
                 Size="Size.Medium" Color="Color.Surface" Variant="Variant.Filled" 
                 OnClick="_discardSelectionService.OnStopDiscarding">
          <MudText Typo="Typo.h5">
              <strong>Cancel</strong>
          </MudText>
      </MudButton>  
      <MudButton ID='discard-cards-confirm-btn'
                 Size="Size.Medium" Color="Color.Error" Variant="Variant.Filled" Style="height: 50px; width:  140px"
                 OnClick="_viewModel.OnDiscardSelectedCards"
                 Disabled="_discardSelectionService.SelectedForDiscard.Count == 0">
          <MudText Typo="Typo.h5">
              <strong>Discard</strong>
          </MudText>
      </MudButton>  
 }else if (_viewModel.TurnState == TurnState.REVIEWING_RESULTS_VALID) {
    <MudSpacer/>
    <MudButton ID='next-turn-btn'
               Size="Size.Large"Variant="Variant.Filled" Style="height: 60px; width:  140px"
               OnClick="_viewModel.OnNextTurn">
        <MudText Typo="Typo.h5">
            <strong>Next Turn</strong>
        </MudText>
    </MudButton>
} else if (_viewModel.TurnState == TurnState.REVIEWING_RESULTS_INVALID)
{
    <MudSpacer/>
    <MudButton ID='try-again-btn'
               Size="Size.Medium"Variant="Variant.Filled" Color="Color.Info" Style="height: 80px; width:  140px"
               OnClick="_viewModel.OnBackFromResultsView">
        <MudText Typo="Typo.h5">
            <strong>Try Again</strong>
        </MudText>
    </MudButton>
}

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _discardSelectionService.OnDiscardStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        base.Dispose();
        _discardSelectionService.OnDiscardStateChanged -= StateHasChanged;
    }
}