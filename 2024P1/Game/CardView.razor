@using MudBlazor
@using P1.Models
@using P1.Services
@inherits ViewModelComponentBase

@inject IDiscardSelectionService DiscardSelectionService;

<MudPaper ID=@("card-" + Card.Id)
          @onmouseover="@(() => _viewModel.CardMousedOver = Card)"
          @onmouseleave="@(() => _viewModel.CardMousedOver = null)"
          @onclick="OnClickCard"
          class=@("card d-flex justify-center align-center " + GetCardHighlightClass(Card.Highlight))
          Elevation="25"
          >
    @if (Card.Superscript != null)
    {
        <MudText Typo="Typo.subtitle2" Style="position: absolute; top: 10px; right:  10px;">
            <strong>@Card.Superscript</strong>
        </MudText>
    }
    <MudText Typo="Typo.h4">@Card.Text</MudText>

    @if (IsCardSelectedForDiscard(Card)) {
        <div class="discard-overlay">âœ–</div>
    }
</MudPaper>

<style>
    .card {
        width: 85px;
        height: 85px;
    }

    .card-highlight-success {
        background-color: #dbf2c9;
    }

    .card-highlight-failure {
        background-color: #ffc5bc;
    }

    .card-highlight-cemented {
        background-color: lightgray;
    }

    .discard-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        color: red;
        font-weight: bold;
        pointer-events: none; /* Prevents blocking clicks */
    }
</style>

@code {

    [Parameter] public CardVM Card { get; set; }

    private string GetCardHighlightClass(CardHighlight contextHighlight) =>
        contextHighlight switch {
            CardHighlight.Success => "card-highlight-success",
            CardHighlight.Failure => "card-highlight-failure",
            CardHighlight.Cemented => "card-highlight-cemented",
            CardHighlight.None => "card-highlight-none",
            _ => throw new ArgumentOutOfRangeException(nameof(contextHighlight), contextHighlight, null)
        };

    private void OnClickCard()
    {
        if (_viewModel.TurnState == TurnState.DISCARDING)
        {
            DiscardSelectionService.ToggleSelectForDiscard(Card);
        }
    }
    
    private bool IsCardSelectedForDiscard(CardVM card)
    {
        return DiscardSelectionService.SelectedForDiscard.Contains(card);
    }

}