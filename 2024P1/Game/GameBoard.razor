@page "/"
@using MudBlazor
@using P1.Models
@using P1.Services

@inject IGameBoardViewModel _viewModel;
@inject IJSRuntime JS;

<MudDropContainer Class="d-flex flex-column flex-grow-1" T="CardVM" 
                  Items="_viewModel.Cards" 
                  ItemsSelector="@((item,dropzone) => item.Place == dropzone)"
                  ItemDropped="ItemUpdated">
    <ChildContent>
        

        <div style="width: 100%; height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center">
            <div @ref=@boardGridRef class="board-grid" style="max-width: 80vw; max-height: 60vh; overflow:  scroll;">
                @foreach (var (x, y) in _viewModel.BoardDropZonePositions)
                {
                    int gridColumn = x + _gridSize/2;
                    int gridRow = y + _gridSize/2;

                    <div class="board-grid-item d-flex justify-center align-center" style="grid-column: @(gridColumn); grid-row: @(gridRow)">
                        <MudDropZone Class="board-drop-zone rounded-lg flex-grow-1"
                                     T="CardVM" Identifier=@($"board-({x},{y})")
                                     CanDrop="@((card) => CanCardBeDroppedAt(card, (x, y)))">
                        </MudDropZone>
                    </div>
                }
            </div>
            <MudDropZone Class="hand-drop-zone m-5 rounded-lg d-flex flex-grow-1  flex-wrap " T="CardVM"
                         Identifier="hand"
                         CanDrop="@((card) => _viewModel.CanCardBeMovedToHand(card))"/>
        </div>
        
    </ChildContent>
    <ItemRenderer>
        <MudPaper ID=@("card-" + context.Id)
                  class=" card d-flex justify-center align-center" Elevation="25">
            <MudText Typo="Typo.h4">@context.Text</MudText>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

<MudButton ID='play-cards-btn' 
           Disabled="_viewModel.NumCardsOnBoard == 0"
           OnClick="_viewModel.PlayCards">
    Play Cards
</MudButton>

<style>
    .card {
        width: 100px;
        height: 100px;
    }
    
    .board-drop-zone {
        width: 100px;
        height: 100px;
        max-width: 100px;
        max-height: 100px;
        background-color: var(--mud-palette-dark-hover);
    }
    
    .hand-drop-zone {
        align-items: center;
        justify-content: center;
        background-color: var(--mud-palette-dark-hover);
        min-width: 600px;
        max-width: 600px;
        min-height: 137px;
        max-height: 137px;
        display: flex
    }
    
    .hand-drop-zone .card {
        margin: 7px;
    }
    
    
    .board-grid {
        display: grid;
        grid-template-columns: repeat(@(_gridSize), @(_boardDropZoneSizePx)px);
        grid-template-rows: repeat(@(_gridSize), @(_boardDropZoneSizePx)px);
    }

    .board-grid-item {
        width: @(_boardDropZoneSizePx)px;
        height: @(_boardDropZoneSizePx)px;
    }
</style>

@code {
    private int _gridSize = 10;
    private int _boardDropZoneSizePx = 115;
    private bool _cardHovered = false;

    private ElementReference boardGridRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CenterScrollPosition();
        }
    }

    private async Task CenterScrollPosition()
    {
        await JS.InvokeVoidAsync("scrollToCenter", boardGridRef);
    }
    
    private void ItemUpdated(MudItemDropInfo<CardVM> dropItem)
    {
        _viewModel.MoveCard(dropItem.Item, dropItem.DropzoneIdentifier);
        StateHasChanged();
    }

    private bool CanCardBeDroppedAt(CardVM card, (int x, int y) pos)
    {
        return !_viewModel.IsCardAtPosition(pos)
               && _viewModel.CanCardBeMovedToBoardPos(card, pos) ;
    }

}