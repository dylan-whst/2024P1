
@using _2024P1.Game
@using AngleSharp.Dom
@using FluentAssertions
@using MudBlazor
@using MudBlazor.Services
@using NSubstitute
@using NUnit.Framework
@using P1.Models
@using P1.Services
@inherits GameBoardTestBase


This is a test for what happens when clicking the 'play cards' button 
after playing basic letter cards on an empty board.


@code {
    private IGameBoardViewModel _gameBoardViewModel;
    private IBoardService _mockBoardService = Substitute.For<IBoardService>();
    private IHandService _mockHandService = Substitute.For<IHandService>();
    private IPlayCardsService _mockPlayCardsService = Substitute.For<IPlayCardsService>();

    [SetUp]
    public void SetUp()
    {
        _mockHandService.Cards.Returns(new List<Card>());
        
        _mockBoardService.BoardState.Returns(_mockBoardState);
        _mockHandService.Cards.Returns([]);
        
        Services.AddScoped(_ => _gameBoardViewModel);
        Services.AddMudServices();
        JSInterop.Mode = JSRuntimeMode.Loose;
    }
    
    private Dictionary<(int x, int y), Card> _mockBoardState => new Dictionary<(int x, int y), Card>()
    {
        { (x: 0, y: 0), new LetterCard { Id = 1, Letter = 'g' } },
        { (x: 1, y: 0), new LetterCard { Id = 2, Letter = 'o' } },
        { (x: 2, y: 0), new LetterCard { Id = 3, Letter = 'o' } },
        { (x: 3, y: 0), new LetterCard { Id = 4, Letter = 'd' } },
    };

    private void ConstructVM()
    {
        _gameBoardViewModel = new GameBoardViewModel(
            _mockBoardService,
            _mockHandService,
            _mockPlayCardsService
        );
    }

    [Test]
    public void Initially__NoError()
    {
        
    }

    [Test]
    public void PlayCardsClicked__ValidTurn__NextTurnButtonAppears()
    {
        _mockPlayCardsService.GetPlayCardsResult(
            Arg.Any<Dictionary<(int x, int y), Card>>())
            .Returns(new PlayCardsResult() {IsTurnValid = true});
        ConstructVM();
        _cut = Render(@<GameBoard/>);

        _cut.Find("#play-cards-btn").Click();

        _cut.Find("#next-turn-btn");
    }
    
    [Test]
    public void PlayCardsClicked__InvalidTurn__TryAgainButtonAppears()
    {
        _mockPlayCardsService.GetPlayCardsResult(
                Arg.Any<Dictionary<(int x, int y), Card>>())
            .Returns(new PlayCardsResult() {IsTurnValid = false});
        ConstructVM();
        _cut = Render(@<GameBoard/>);

        _cut.Find("#play-cards-btn").Click();

        _cut.Find("#try-again-btn");
    }
    
    [Test]
    public void PlayCardsClicked__ValidTurn__DraggingCardDoesntMoveIt()
    {
        _mockPlayCardsService.GetPlayCardsResult(
                Arg.Any<Dictionary<(int x, int y), Card>>())
            .Returns(new PlayCardsResult() {IsTurnValid = true});
        _mockBoardService.WouldCardBreakBoardIfGone(Arg.Any<(int x, int y)>()).Returns(false);
        ConstructVM();
        _cut = Render(@<GameBoard/>);

        _cut.Find("#play-cards-btn").Click();
        
        DragCardToContainer(1, "hand");
        _mockHandService.DidNotReceive().Add(Arg.Any<Card>());
    }
}